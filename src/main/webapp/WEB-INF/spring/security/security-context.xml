<?xml version="1.0" encoding="UTF-8"?>
<!-- 이 부분이 스프링 시큐리티 설정파일임을 알려주는것같은데 설명이 생략돼있음 -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 정적 리소스 파일들에는 보안 설정을 하지 않음 -->
    <http pattern="/include/**" security="none" />
    <http pattern="/resources/**" security="none" />
    
    <http auto-config="true" use-expressions="true" create-session="never">
	    <!-- 관리자 영역 설정 -->
	    <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />  
	    <intercept-url pattern="/user/login" access="hasRole('ROLE_ANONYMOUS')" /> 
	    <intercept-url pattern="/user/join" access="hasRole('ROLE_ANONYMOUS')" /> 
	    <!-- 권한에 관계없이 접속 가능한 영역(guest도 접속 가능) -->
	    <intercept-url pattern="/**" access="permitAll" />
		<!-- 로그인한 사용자 영역 --> 
		<!--  
	    <intercept-url pattern="/**" access= "hasAnyRole('ROLE_USER','ROLE_TEST','ROLE_ADMIN','ROLE_GUEST')" />
	    -->
	    
	    <!-- 로그인폼 -->
	    <form-login login-page="/user/login"
	        login-processing-url="/user/login_check"
	        authentication-success-handler-ref="userLoginSuccessHandler"
	        authentication-failure-handler-ref="userLoginFailureHandler"
	        username-parameter="userid" 
	        password-parameter="passwd" 
	        />
	    
	    <!-- 동시 접속 막기 -->
	    <!--  
	    <session-management>
	        <concurrency-control max-sessions="2"
	            expired-url="/user/login" 
	            error-if-maximum-exceeded="true" />
	    </session-management>
	    -->    
	        
	    <!-- 로그아웃 관련 처리 -->
	    <logout delete-cookies= "JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"
	        logout-success-url="/" 
	        logout-url="/user/logout"
	        invalidate-session="true" /> 
	            
	    <!-- 접근권한이 없는 경우의 코드 -->
	    <access-denied-handler ref="userDeniedHandler" />
	        
	    <!-- 자동 로그인 관련 쿠키 저장, 세션이 종료된 후에도 자동 로그인할 수 있는 기능 86400 1일, 604800 7일 -->
	    <remember-me key="userKey" token-validity-seconds="86400" />
    </http>
    
    <beans:bean id="userDeniedHandler" class="com.hatsnake.spring02.common.security.UserDeniedHandler" />
    <beans:bean id="userLoginSuccessHandler" class="com.hatsnake.spring02.common.security.UserLoginSuccessHandler" />
    <beans:bean id="userLoginFailureHandler" class="com.hatsnake.spring02.common.security.UserLoginFailureHandler" />
 
    <!-- 로그인 인증을 처리하는 빈 -->
    <beans:bean id="userService" class="com.hatsnake.spring02.common.security.UserAuthenticationService">
        <beans:constructor-arg name="sqlSession" ref="sqlSession" />
    </beans:bean>
    
    <!-- 사용자가 입력한 비밀번호를 암호화된 비밀번호와 체크하는 로직이 포함됨 -->
		<authentication-manager>
			<authentication-provider user-service-ref="userService">
				<password-encoder ref="passwordEncoder">
					<salt-source user-property="username"/>
				</password-encoder>
			</authentication-provider>
		</authentication-manager>
    
    <!-- 비밀번호 암호화 빈 -->
    <beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
        <beans:constructor-arg name="strength" value="256" />
    </beans:bean>
    
</beans:beans>